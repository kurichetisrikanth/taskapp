{"version":3,"sources":["logo.svg","components/common/table.jsx","components/common/input.jsx","components/taskboard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","data","rowData","map","task","index","key","id","scope","date","length","className","Input","isEnabled","taskId","taskDate","htmlFor","value","onChange","eveObj","onTaskIdChange","type","onTaskDateChange","name","disabled","onClick","onSubmit","onReset","TaskBoard","state","tasks","handleSubmit","push","setState","console","log","handleTaskIdChange","eventObj","target","handleTaskDateSelect","handleReset","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kJAAAA,EAAOC,QAAU,IAA0B,kC,kKC8B5BC,G,MA7BD,SAACC,GACX,IAAIC,EAAOD,EAAMC,KACbC,EAAUD,EAAKE,KAAI,SAACC,EAAKC,GACzB,OACI,wBAAIC,IAAKF,EAAKG,IACV,wBAAIC,MAAM,OAAOH,EAAM,GACvB,4BAAKD,EAAKK,MACV,4BAAKL,EAAKG,QAItB,OAAmB,IAAhBN,EAAKS,OACG,KAEP,2BAAOC,UAAU,uBACb,+BACI,4BACI,wBAAIH,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,aAGR,+BACKN,MCsBFU,EA7CD,SAACZ,GACX,IAAMa,EAAYb,EAAMc,OAAOJ,OAAS,GAAKV,EAAMe,SAASL,OAAS,EACrE,OACI,yBAAKC,UAAY,YACb,uBAAGA,UAAU,WAAb,aACA,yBAAKA,UAAU,cACX,2BAAOK,QAAQ,UAAf,WACA,2BACIC,MAASjB,EAAMc,OACfI,SAAU,SAACC,GAAD,OAAYnB,EAAMoB,eAAeD,IAC3CE,KAAK,UACLV,UAAU,eACVJ,GAAG,YAEX,yBAAKI,UAAU,cACX,+CACA,2BACIM,MAASjB,EAAMe,SACfG,SAAY,SAACC,GAAD,OAAYnB,EAAMsB,iBAAiBH,IAC/CE,KAAK,OACLE,KAAK,WACLZ,UAAU,kBAGlB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,4BACIa,UAAWX,EACXY,QAAWzB,EAAM0B,SACjBf,UAAU,2CAHd,WAOJ,yBAAKA,UAAU,OACX,4BACIc,QAAWzB,EAAM2B,QACjBhB,UAAU,2CAFd,aCsBLiB,E,4MAnDXC,MAAQ,CACJC,MAAO,GACPhB,OAAQ,GACRC,SAAS,I,EAGbgB,aAAe,WACX,IAAI3B,EAAO,CACPG,GAAK,EAAKsB,MAAMf,OAChBL,KAAO,EAAKoB,MAAMd,UAEhBe,EAAQ,EAAKD,MAAMC,MACzBA,EAAME,KAAK5B,GACX,EAAK6B,SAAS,CAACH,UACfI,QAAQC,IAAI,EAAKN,MAAMC,OACvB,EAAKG,SAAS,CAACnB,OAAQ,KACvB,EAAKmB,SAAS,CAAClB,SAAU,M,EAE7BqB,mBAAqB,SAACC,GAElB,EAAKJ,SAAS,CAACnB,OAAQuB,EAASC,OAAOrB,S,EAE3CsB,qBAAuB,SAACF,GAEpB,EAAKJ,SAAS,CAAClB,SAAUsB,EAASC,OAAOrB,S,EAE7CuB,YAAc,WACV,EAAKP,SAAS,CACVH,MAAO,GACPhB,OAAQ,GACRC,SAAS,M,uDAIb,OACI,6BACI,kBAAC,EAAD,CACID,OAAU2B,KAAKZ,MAAMf,OACrBC,SAAY0B,KAAKZ,MAAMd,SACvBK,eAAkBqB,KAAKL,mBACvBd,iBAAoBmB,KAAKF,qBACzBb,SAAYe,KAAKV,aACjBJ,QAAWc,KAAKD,cACpB,kBAAC,EAAD,CACIvC,KAAQwC,KAAKZ,MAAMC,a,GA7CfY,aCMTC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.b0cf0b08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nconst Table = (props) => {\r\n    let data = props.data;\r\n    let rowData = data.map((task,index)=>{\r\n        return (\r\n            <tr key={task.id}>\r\n                <th scope=\"row\">{index+1}</th>\r\n                <td>{task.date}</td>\r\n                <td>{task.id}</td>\r\n            </tr>\r\n        )\r\n    })\r\n    if(data.length === 0)\r\n        return null;\r\n    return ( \r\n        <table className=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Date</th>\r\n                    <th scope=\"col\">Task ID</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rowData}\r\n            </tbody>\r\n        </table>\r\n     );\r\n}\r\n \r\nexport default Table;","import React from 'react';\r\nconst Input = (props) => {\r\n    const isEnabled = props.taskId.length > 0 && props.taskDate.length > 0;\r\n    return ( \r\n        <div className = \"centered\">\r\n            <p className=\"h4 mb-4\">Add tasks</p>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"taskId\">Task ID</label>\r\n                <input \r\n                    value = {props.taskId}\r\n                    onChange={(eveObj) => props.onTaskIdChange(eveObj)}\r\n                    type=\"textbox\" \r\n                    className=\"form-control\" \r\n                    id=\"taskId\"/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label >Date of task</label>\r\n                <input \r\n                    value = {props.taskDate}\r\n                    onChange = {(eveObj) => props.onTaskDateChange(eveObj)}\r\n                    type=\"date\" \r\n                    name=\"taskDate\" \r\n                    className=\"form-control\"/>\r\n            </div>\r\n            \r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <button \r\n                        disabled={!isEnabled}\r\n                        onClick = {props.onSubmit}\r\n                        className=\"btn btn-primary form-control  btn-block\">\r\n                            Submit\r\n                    </button>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <button \r\n                        onClick = {props.onReset}\r\n                        className=\"btn btn-primary form-control  btn-block\">\r\n                            Reset\r\n                    </button>\r\n                </div>\r\n            </div>  \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Input;","import React, { Component } from 'react';\r\nimport './taskboard.css';\r\nimport Table from './common/table';\r\nimport Input from './common/input';\r\n\r\nclass TaskBoard extends Component {\r\n    state = { \r\n        tasks :[],\r\n        taskId: '',\r\n        taskDate:''\r\n    }\r\n\r\n    handleSubmit = () =>{\r\n        let task = {\r\n            id : this.state.taskId,\r\n            date : this.state.taskDate \r\n        };\r\n        const tasks = this.state.tasks;\r\n        tasks.push(task);\r\n        this.setState({tasks});\r\n        console.log(this.state.tasks);\r\n        this.setState({taskId: ''});\r\n        this.setState({taskDate: ''});\r\n    }\r\n    handleTaskIdChange = (eventObj) =>{\r\n        //console.log(eventObj.target.value);\r\n        this.setState({taskId: eventObj.target.value});\r\n    }\r\n    handleTaskDateSelect = (eventObj) =>{\r\n        //console.log(eventObj.target.value);\r\n        this.setState({taskDate: eventObj.target.value});\r\n    }\r\n    handleReset = () =>{\r\n        this.setState({ \r\n            tasks :[],\r\n            taskId: '',\r\n            taskDate:''\r\n        });\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <Input \r\n                    taskId = {this.state.taskId}\r\n                    taskDate = {this.state.taskDate}\r\n                    onTaskIdChange = {this.handleTaskIdChange}\r\n                    onTaskDateChange = {this.handleTaskDateSelect}\r\n                    onSubmit = {this.handleSubmit}\r\n                    onReset = {this.handleReset}/>\r\n                <Table\r\n                    data = {this.state.tasks}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default TaskBoard;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TaskBoard from './components/taskboard';\n\nfunction App() {\n  return (\n    <TaskBoard/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}